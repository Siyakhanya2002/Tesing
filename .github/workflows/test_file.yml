name: Deploy TimesheetDB Database

on:
  push:
    branches:
      - main
    paths:
      - 'Database/**'
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest  # You can change this to `ubuntu-22.04` if you prefer stability

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug repository contents
        run: |
          echo "Step 1: Debugging repository contents"
          pwd
          ls -la
          echo "Checking for Database/ directory"
          if [ -d Database ]; then
            ls -la Database/
            if [ -f Database/create_timesheetdb.sql ]; then
              echo "Found Database/create_timesheetdb.sql"
            else
              echo "Error: Database/create_timesheetdb.sql not found"
              exit 1
            fi
          else
            echo "Error: Database/ directory not found"
            exit 1
          fi

      # Step 2: Install Microsoft SQL Server tools (sqlcmd)
      - name: Install sqlcmd
        run: |
          echo "Step 2: Installing sqlcmd on Ubuntu"
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release

          # Detect Ubuntu codename
          ubuntu_codename=$(lsb_release -cs)
          echo "Detected Ubuntu codename: $ubuntu_codename"

          # Fallback if noble is unsupported
          if [ "$ubuntu_codename" = "noble" ]; then
            echo "Microsoft repo for 'noble' not available. Falling back to 'jammy'"
            ubuntu_codename="jammy"
          fi

          # Clean up old Microsoft repo files
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list /etc/apt/sources.list.d/msprod.list

          # Add Microsoft GPG key
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /usr/share/keyrings/microsoft-prod.gpg > /dev/null

          # Download the Microsoft repo list
          repo_url="https://packages.microsoft.com/config/ubuntu/$ubuntu_codename/prod.list"
          echo "Fetching Microsoft repo list from: $repo_url"
          if ! curl -sSL -o /tmp/microsoft-prod.list "$repo_url"; then
            echo "Error: Failed to download Microsoft repository list from $repo_url"
            exit 1
          fi

          sudo mv /tmp/microsoft-prod.list /etc/apt/sources.list.d/microsoft-prod.list

          # Update packages and install tools
          sudo apt-get update || { echo "Error: apt-get update failed"; exit 1; }
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev

          # Add sqlcmd to PATH
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH
          echo "sqlcmd version: $(sqlcmd -? | grep Version)"
          echo "Step 2 completed: sqlcmd installed"
        env:
          DEBIAN_FRONTEND: noninteractive

      # Step 3: Deploy database, table, stored procedure
      - name: Deploy TimesheetDB database
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 3: Running Database/create_timesheetdb.sql"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -i Database/create_timesheetdb.sql -l 60 -o sql_output.log
          if [ $? -eq 0 ]; then
            echo "Step 3 completed: SQL script executed"
            cat sql_output.log
          else
            echo "Step 3 failed: SQL script error"
            cat sql_output.log
            exit 1
          fi

      # Step 4: Verify deployment by querying the tables
      - name: Verify deployment
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 4: Verifying tables in TimesheetDB"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -Q "USE TimesheetDB; SELECT name FROM sys.tables WHERE name IN ('Employee', 'Client', 'Project', 'ExpenseCategory', 'LeaveType', 'TimesheetEntry', 'ExpenseEntry', 'LeaveEntry');" -l 60 -o verify_output.log
          if [ $? -eq 0 ]; then
            echo "Step 4 completed: Verified tables in TimesheetDB"
            cat verify_output.log
          else
            echo "Step 4 failed: Verification error"
            cat verify_output.log
            exit 1
          fi
