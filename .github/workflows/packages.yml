name: Deploy TimesheetDB and SSIS Package

on:
  push:
    branches:
      - main
    paths:
      - 'Database/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Debugging repo structure
      - name: Debug repository contents
        run: |
          echo "Step 1: Debugging repository contents"
          pwd
          ls -la
          if [ -d Database ]; then
            ls -la Database/
            if [ -f Database/create_timesheetdb.sql ]; then
              echo "Found Database/create_timesheetdb.sql"
            else
              echo "Error: Database/create_timesheetdb.sql not found"
              exit 1
            fi
            if [ -d Database/Packages ]; then
              ls -la Database/Packages/
              if [ -f Database/Packages/TimesheetMigration.ispac ]; then
                echo "Found .ispac file"
              else
                echo "Warning: .ispac not found"
              fi
            else
              echo "Warning: Packages folder not found"
            fi
          else
            echo "Error: Database folder not found"
            exit 1
          fi

      # Step 2: Install sqlcmd
      - name: Install sqlcmd
        run: |
          echo "Installing sqlcmd"
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /usr/share/keyrings/microsoft-prod.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/$(lsb_release -rs)/prod $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH
        env:
          DEBIAN_FRONTEND: noninteractive

      # Step 3: Deploy database
      - name: Deploy TimesheetDB database
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Deploying TimesheetDB database"
          if sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -i Database/create_timesheetdb.sql -l 60 -o sql_output.log; then
            echo "Database deployed successfully"
            cat sql_output.log
            echo "DEPLOY_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Database deployment failed"
            cat sql_output.log
            echo "DEPLOY_SUCCESS=false" >> $GITHUB_ENV
            exit 1
          fi

      # Step 4: Verify DB tables
      - name: Verify database tables
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Verifying TimesheetDB tables"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -Q "
            USE TimesheetDB;
            SELECT name FROM sys.tables WHERE name IN ('Employee', 'Client', 'Project', 'ExpenseCategory', 'LeaveType', 'TimesheetEntry', 'ExpenseEntry', 'LeaveEntry');
          " -l 60 -o verify_output.log
          cat verify_output.log

      # Step 5: Create SSISDB catalog & folder if needed
      - name: Create SSISDB catalog and folder
        if: env.DEPLOY_SUCCESS == 'true' && exists('Database/Packages/TimesheetMigration.ispac')
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Checking and creating SSISDB and folder if needed"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -Q "
            IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'SSISDB')
            BEGIN
              CREATE DATABASE SSISDB;
              ALTER DATABASE SSISDB SET RECOVERY SIMPLE;
              EXEC msdb.dbo.sp_addlogin @loginame = 'SSISDBOwner', @passwd = 'StrongPassword123!', @defdb = 'SSISDB';
              EXEC SSISDB.catalog.create_catalog @password = 'StrongPassword123!';
              EXEC SSISDB.catalog.set_catalog_property @property_name = 'ENCRYPTION_ALGORITHM', @property_value = 'AES_256';
            END
            USE SSISDB;
            IF NOT EXISTS (SELECT * FROM catalog.folders WHERE name = 'Timesheet')
            BEGIN
              EXEC catalog.create_folder @folder_name = 'Timesheet';
            END
          " -l 60 -o ssisdb_output.log
          cat ssisdb_output.log

      # Step 6: Deploy SSIS package only if database created
      - name: Deploy SSIS package
        if: env.DEPLOY_SUCCESS == 'true' && exists('Database/Packages/TimesheetMigration.ispac')
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Deploying TimesheetMigration SSIS package"
          ispac_path="Database/Packages/TimesheetMigration.ispac"
          ispac_data=$(xxd -p -c 0 "$ispac_path" | tr -d '\n')
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -Q "
            DECLARE @ispac_binary VARBINARY(MAX) = CONVERT(VARBINARY(MAX), 0x$ispac_data, 2);
            DECLARE @operation_id BIGINT;
            EXEC SSISDB.catalog.deploy_project 
              @folder_name = N'Timesheet',
              @project_name = N'TimesheetMigration',
              @project_stream = @ispac_binary,
              @operation_id = @operation_id OUTPUT;
            SELECT @operation_id AS operation_id;
            IF EXISTS (
              SELECT * FROM SSISDB.catalog.operation_messages
              WHERE operation_id = @operation_id AND message_type = 120
            )
            BEGIN
              RAISERROR ('SSIS Deployment failed.', 16, 1);
            END
          " -l 60 -o deploy_output.log
          cat deploy_output.log
