name: Deploy TimesheetDB Database

on:
  push:
    branches:
      - main
    paths:
      - 'Database/**'
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub-hosted Ubuntu runner

    steps:
      # Step 1: Checkout the repository to access the SQL script
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Confirm checkout
        run: |
          echo "Step 1: Checked out the repository containing sql/create_timesheetdb.sql"
          ls -la sql/ || { echo "sql/ directory not found"; exit 1; }
          if [ -f sql/create_timesheetdb.sql ]; then
            echo "Found sql/create_timesheetdb.sql"
          else
            echo "Error: sql/create_timesheetdb.sql not found"
            exit 1
          fi

      # Step 2: Install Microsoft SQL Server tools (sqlcmd)
      - name: Install sqlcmd
        run: |
          echo "Step 2: Installing sqlcmd on Ubuntu"
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          # Clean up existing Microsoft repository files to avoid duplicates
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list /etc/apt/sources.list.d/msprod.list
          # Add Microsoft GPG key
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /usr/share/keyrings/microsoft-prod.gpg > /dev/null
          # Add Microsoft repository dynamically based on Ubuntu version
          ubuntu_codename=$(lsb_release -cs)
          echo "Detected Ubuntu codename: $ubuntu_codename"
          curl -sSL https://packages.microsoft.com/config/ubuntu/$ubuntu_codename/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
          # Update package lists
          sudo apt-get update
          # Install mssql-tools and unixodbc-dev
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev
          # Add sqlcmd to PATH
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH
          echo "sqlcmd version: $(sqlcmd -? | grep Version)"
          echo "Step 2 completed: sqlcmd installed"
        env:
          DEBIAN_FRONTEND: noninteractive  # Avoid interactive prompts

      # Step 3: Deploy database, table, stored procedure
      - name: Deploy TimesheetDB database
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 3: Running sql/create_timesheetdb.sql"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -i sql/create_timesheetdb.sql -l 60 -o sql_output.log
          if [ $? -eq 0 ]; then
            echo "Step 3 completed: SQL script executed"
            cat sql_output.log
          else
            echo "Step 3 failed: SQL script error"
            cat sql_output.log
            exit 1
          fi

      # Step 4: Verify deployment by querying the tables
      - name: Verify deployment
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 4: Verifying tables in TimesheetDB"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASS" -Q "USE TimesheetDB; SELECT name FROM sys.tables WHERE name IN ('Employee', 'Client', 'Project', 'ExpenseCategory', 'LeaveType', 'TimesheetEntry', 'ExpenseEntry', 'LeaveEntry');" -l 60 -o verify_output.log
          if [ $? -eq 0 ]; then
            echo "Step 4 completed: Verified tables in TimesheetDB"
            cat verify_output.log
          else
            echo "Step 4 failed: Verification error"
            cat verify_output.log
            exit 1
          fi
