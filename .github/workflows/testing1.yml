name: Deploy TimesheetDB and SSIS Package with SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'Database/**'
  workflow_dispatch:

env:
  SSIS_FOLDER_NAME: "Timesheet"
  SSIS_PROJECT_NAME: "TimesheetMigration"
  SSIS_PACKAGE_NAME: "MigrateExcelData.dtsx"
  SQL_AGENT_JOB_NAME: "RunTimesheetMigration"

jobs:
  deploy-and-schedule:
    runs-on: self-hosted
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Debug repository contents
        shell: pwsh
        run: |
          Write-Host "Step 1: Debugging repository contents"
          Get-Location
          Get-ChildItem -Recurse
          Write-Host "Checking for Database/ directory"
          if (Test-Path -Path "Database") {
            Get-ChildItem -Path "Database"
            if (Test-Path -Path "Database/create_timesheetdb.sql") {
              Write-Host "Found Database/create_timesheetdb.sql"
            } else {
              Write-Error "Database/create_timesheetdb.sql not found"
              exit 1
            }
            Write-Host "Checking for Database/Packages/ directory"
            if (Test-Path -Path "Database/Packages") {
              Get-ChildItem -Path "Database/Packages"
              if (Test-Path -Path "Database/bin/Development/Integration Services Project1.ispac") {
                Write-Host "Found Database/bin/Development/Integration Services Project1.ispac"
              } else {
                Write-Error "Database/bin/Development/Integration Services Project1.ispac not found"
                exit 1
              }
            } else {
              Write-Error "Database/Packages/ directory not found"
              exit 1
            }
          } else {
            Write-Error "Database/ directory not found"
            exit 1
          }

      # Step 2: Deploy TimesheetDB
      - name: Deploy TimesheetDB database
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 2: Running Database/create_timesheetdb.sql"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -i "Database\create_timesheetdb.sql" -l 60 > sql_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 2 completed: SQL script executed"
            type sql_output.log
          ) else (
            echo "Step 2 failed: SQL script error"
            type sql_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 3: Verify database deployment
      - name: Verify database deployment
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 3: Verifying tables in TimesheetDB"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -Q "USE TimesheetDB; SELECT name FROM sys.tables WHERE name IN ('Employee', 'Client', 'Project', 'ExpenseCategory', 'LeaveType', 'TimesheetEntry', 'ExpenseEntry', 'LeaveEntry');" -l 60 > verify_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 3 completed: Verified tables in TimesheetDB"
            type verify_output.log
          ) else (
            echo "Step 3 failed: Verification error"
            type verify_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 4: Create SSISDB catalog and folder
      - name: Create SSISDB catalog and Timesheet folder
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 4: Creating SSISDB catalog and Timesheet folder"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -Q ^
            "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'SSISDB') BEGIN ^
                EXEC msdb.dbo.sp_addlogin @loginame = 'SSISDBOwner', @passwd = 'StrongPassword123!', @defdb = 'SSISDB'; ^
                CREATE DATABASE SSISDB; ^
                ALTER DATABASE SSISDB SET RECOVERY SIMPLE; ^
                EXEC SSISDB.catalog.create_catalog @password = 'StrongPassword123!'; ^
                EXEC SSISDB.catalog.set_catalog_property @property_name = 'ENCRYPTION_ALGORITHM', @property_value = 'AES_256'; ^
            END ^
            USE SSISDB; ^
            IF NOT EXISTS (SELECT * FROM catalog.folders WHERE name = '%SSIS_FOLDER_NAME%') BEGIN ^
                EXEC catalog.create_folder @folder_name = '%SSIS_FOLDER_NAME%'; ^
            END" -l 60 > ssisdb_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 4 completed: SSISDB catalog and Timesheet folder created"
            type ssisdb_output.log
          ) else (
            echo "Step 4 failed: SSISDB creation error"
            type ssisdb_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 5: Deploy SSIS package
      - name: Deploy SSIS package
        shell: pwsh
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
          SSIS_FOLDER_NAME: ${{ env.SSIS_FOLDER_NAME }}
          SSIS_PROJECT_NAME: ${{ env.SSIS_PROJECT_NAME }}
        run: |
          Write-Host "Step 5: Deploying TimesheetMigration.ispac"
          $ispacPath = "Database/Packages/TimesheetMigration.ispac"
          if (-not (Test-Path $ispacPath)) {
            Write-Error "ISPAC file not found at: $ispacPath"
            exit 1
          }
          $projectBytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $hexString = [System.BitConverter]::ToString($projectBytes) -replace '-',''
          $deploySql = @"
          USE SSISDB;
          DECLARE @folder_name NVARCHAR(128) = '$env:SSIS_FOLDER_NAME';
          DECLARE @project_name NVARCHAR(128) = '$env:SSIS_PROJECT_NAME';
          DECLARE @project_stream VARBINARY(MAX) = 0x$hexString;
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = @folder_name)
          BEGIN
              EXEC catalog.create_folder @folder_name;
          END
          EXEC catalog.deploy_project @folder_name, @project_name, @project_stream;
          "@
          $deploySql | Out-File -FilePath "deploy_ssis.sql" -Encoding UTF8
          sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASS" -i "deploy_ssis.sql" -l 60 > deploy_output.log 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Step 5 completed: SSIS package deployed"
            Get-Content deploy_output.log
          } else {
            Write-Host "Step 5 failed: SSIS deployment error"
            Get-Content deploy_output.log
            exit $LASTEXITCODE
          }

      # Step 6: Create or update SQL Agent job
      - name: Create or update SQL Agent job
        shell: pwsh
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
          SSIS_FOLDER_NAME: ${{ env.SSIS_FOLDER_NAME }}
          SSIS_PROJECT_NAME: ${{ env.SSIS_PROJECT_NAME }}
          SSIS_PACKAGE_NAME: ${{ env.SSIS_PACKAGE_NAME }}
          SQL_AGENT_JOB_NAME: ${{ env.SQL_AGENT_JOB_NAME }}
          EXCEL_PATH: ${{ secrets.EXCEL_PATH }}
        run: |
          Write-Host "Step 6: Creating or updating SQL Agent job"
          $jobScript = @"
          USE msdb;
          IF EXISTS (SELECT 1 FROM sysjobs WHERE name = '$env:SQL_AGENT_JOB_NAME')
          BEGIN
              EXEC sp_delete_job @job_name = '$env:SQL_AGENT_JOB_NAME';
          END
          EXEC dbo.sp_add_job
              @job_name = N'$env:SQL_AGENT_JOB_NAME',
              @enabled = 1,
              @description = N'Runs TimesheetMigration SSIS package daily';
          EXEC dbo.sp_add_jobstep
              @job_name = N'$env:SQL_AGENT_JOB_NAME',
              @step_name = N'Execute MigrateExcelData',
              @subsystem = N'SSIS',
              @command = N'/ISSERVER "\"\SSISDB\$env:SSIS_FOLDER_NAME\$env:SSIS_PROJECT_NAME\$env:SSIS_PACKAGE_NAME\"" /SERVER \"$env:SQL_SERVER\" /Par "\"ExcelFilePath\"";\"$env:EXCEL_PATH\" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E',
              @database_name = N'master';
          EXEC dbo.sp_add_jobschedule
              @job_name = N'$env:SQL_AGENT_JOB_NAME',
              @name = N'DailySchedule',
              @enabled = 1,
              @freq_type = 4,  -- Daily
              @freq_interval = 1,
              @active_start_date = $(Get-Date -Format yyyyMMdd),
              @active_start_time = 010000;  -- 1:00 AM
          EXEC dbo.sp_add_jobserver
              @job_name = N'$env:SQL_AGENT_JOB_NAME';
          "@
          $jobScript | Out-File -FilePath "setup_job.sql" -Encoding UTF8
          sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASS" -i "setup_job.sql" -l 60 > job_output.log 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Step 6 completed: SQL Agent job created"
            Get-Content job_output.log
          } else {
            Write-Host "Step 6 failed: SQL Agent job error"
            Get-Content job_output.log
            exit $LASTEXITCODE
          }
