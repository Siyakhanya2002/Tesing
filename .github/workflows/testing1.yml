name: Deploy TimesheetDB and SSIS Package with SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'Database/**'
  workflow_dispatch:

env:
  SSIS_FOLDER_NAME: Timesheet
  SSIS_PROJECT_NAME: Integration Services Project1
  SSIS_PACKAGE_NAME: MigrateExcelData.dtsx
  SQL_AGENT_JOB_NAME: RunTimesheetMigration

jobs:
  deploy-and-schedule:
    runs-on: self-hosted
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Debug repository contents
        shell: powershell
        run: |
          Write-Host "Step 1: Debugging repository contents"
          Get-Location
          Get-ChildItem -Recurse
          Write-Host "Checking for Database/ directory"
          if (Test-Path -Path "Database") {
            Get-ChildItem -Path "Database"
            if (Test-Path -Path "Database/create_timesheetdb.sql") {
              Write-Host "Found Database/create_timesheetdb.sql"
            } else {
              Write-Error "Database/create_timesheetdb.sql not found"
              exit 1
            }
            Write-Host "Checking for Database/bin/Development/ directory"
            if (Test-Path -Path "Database/bin/Development") {
              Get-ChildItem -Path "Database/bin/Development"
              if (Test-Path -Path "Database/bin/Development/Integration Services Project1.ispac") {
                Write-Host "Found Database/bin/Development/Integration Services Project1.ispac"
              } else {
                Write-Error "Database/bin/Development/Integration Services Project1.ispac not found"
                exit 1
              }
            } else {
              Write-Error "Database/bin/Development/ directory not found"
              exit 1
            }
          } else {
            Write-Error "Database/ directory not found"
            exit 1
          }

      # Step 2: Deploy TimesheetDB
      - name: Deploy TimesheetDB database
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 2: Running Database\create_timesheetdb.sql"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -i "Database\create_timesheetdb.sql" -l 60 > sql_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 2 completed: SQL script executed"
            type sql_output.log
          ) else (
            echo "Step 2 failed: SQL script error"
            type sql_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 3: Verify database deployment
      - name: Verify database deployment
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 3: Verifying tables in TimesheetDB"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -Q "USE TimesheetDB; SELECT name FROM sys.tables WHERE name IN ('Employee', 'Client', 'Project', 'ExpenseCategory', 'LeaveType', 'TimesheetEntry', 'ExpenseEntry', 'LeaveEntry');" -l 60 > verify_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 3 completed: Verified tables in TimesheetDB"
            type verify_output.log
          ) else (
            echo "Step 3 failed: Verification error"
            type verify_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 4: Create SSISDB catalog and folder
      - name: Create SSISDB catalog and Timesheet folder
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
          SSIS_FOLDER_NAME: ${{ env.SSIS_FOLDER_NAME }}
        run: |
          echo "Step 4: Creating SSISDB catalog and %SSIS_FOLDER_NAME% folder"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -Q ^
            "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'SSISDB') BEGIN ^
                EXEC msdb.dbo.sp_addlogin @loginame = 'SSISDBOwner', @passwd = 'StrongPassword123!', @defdb = 'SSISDB'; ^
                CREATE DATABASE SSISDB; ^
                ALTER DATABASE SSISDB SET RECOVERY SIMPLE; ^
                EXEC SSISDB.catalog.create_catalog @password = 'StrongPassword123!'; ^
                EXEC SSISDB.catalog.set_catalog_property @property_name = 'ENCRYPTION_ALGORITHM', @property_value = 'AES_256'; ^
            END ^
            USE SSISDB; ^
            IF NOT EXISTS (SELECT * FROM catalog.folders WHERE name = '%SSIS_FOLDER_NAME%') BEGIN ^
                EXEC catalog.create_folder @folder_name = '%SSIS_FOLDER_NAME%'; ^
            END" -l 60 > ssisdb_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 4 completed: SSISDB catalog and %SSIS_FOLDER_NAME% folder created"
            type ssisdb_output.log
          ) else (
            echo "Step 4 failed: SSISDB creation error"
            type ssisdb_output.log
            exit /b %ERRORLEVEL%
          )

      # Step 5: Deploy SSIS package
      - name: Deploy SSIS package
        shell: powershell
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
          SSIS_FOLDER_NAME: ${{ env.SSIS_FOLDER_NAME }}
          SSIS_PROJECT_NAME: ${{ env.SSIS_PROJECT_NAME }}
        run: |
          Write-Host "Step 5: Deploying Integration Services Project1.ispac"
          $ispacPath = "Database/bin/Development/Integration Services Project1.ispac"
          if (-not (Test-Path $ispacPath)) {
            Write-Error "ISPAC file not found at: $ispacPath"
            exit 1
          }
          $projectBytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $hexString = [System.BitConverter]::ToString($projectBytes) -replace '-',''
          $deploySql = @"
          DECLARE @ispac_binary VARBINARY(MAX) = 0x$hexString;
          DECLARE @operation_id BIGINT;
          EXEC SSISDB.catalog.deploy_project 
              @folder_name = N'$env:SSIS_FOLDER_NAME',
              @project_name = N'$env:SSIS_PROJECT_NAME',
              @project_stream = @ispac_binary,
              @operation_id = @operation_id OUTPUT;
          SELECT @operation_id AS operation_id;
          IF EXISTS (SELECT * FROM SSISDB.catalog.operation_messages WHERE operation_id = @operation_id AND message_type = 120)
          BEGIN
              RAISERROR ('Deployment failed. Check SSISDB.catalog.operation_messages for details.', 16, 1);
          END
          "@
          $deploySql | Out-File -FilePath "deploy_ssis.sql" -Encoding UTF8
          sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASS" -i "deploy_ssis.sql" -l 60 > deploy_output.log 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Step 5 completed: SSIS package deployed"
            Get-Content deploy_output.log
          } else {
            Write-Host "Step 5 failed: SSIS deployment error"
            Get-Content deploy_output.log
            exit $LASTEXITCODE
          }

      # Step 6: Create SQL Agent job
      - name: Create SQL Agent job
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USERNAME }}
          SQL_PASS: ${{ secrets.SQL_PASSWORD }}
          SSIS_FOLDER_NAME: ${{ env.SSIS_FOLDER_NAME }}
          SSIS_PROJECT_NAME: ${{ env.SSIS_PROJECT_NAME }}
          SSIS_PACKAGE_NAME: ${{ env.SSIS_PACKAGE_NAME }}
          SQL_AGENT_JOB_NAME: ${{ env.SQL_AGENT_JOB_NAME }}
          EXCEL_PATH: ${{ secrets.EXCEL_PATH }}
        run: |
          echo "Step 6: Creating SQL Agent job %SQL_AGENT_JOB_NAME%"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASS%" -Q ^
            "USE msdb; ^
            IF EXISTS (SELECT 1 FROM sysjobs WHERE name = '%SQL_AGENT_JOB_NAME%') BEGIN ^
                EXEC sp_delete_job @job_name = '%SQL_AGENT_JOB_NAME%'; ^
            END ^
            EXEC dbo.sp_add_job ^
                @job_name = N'%SQL_AGENT_JOB_NAME%', ^
                @enabled = 1, ^
                @description = N'Runs Integration Services Project1 SSIS package daily'; ^
            EXEC dbo.sp_add_jobstep ^
                @job_name = N'%SQL_AGENT_JOB_NAME%', ^
                @step_name = N'Execute %SSIS_PACKAGE_NAME%', ^
                @subsystem = N'SSIS', ^
                @command = N'/ISSERVER \"\SSISDB\%SSIS_FOLDER_NAME%\%SSIS_PROJECT_NAME%\%SSIS_PACKAGE_NAME%\" /SERVER \"%SQL_SERVER%\" /Par \"ExcelFilePath\";\"%EXCEL_PATH%\"', ^
                @database_name = N'master'; ^
            EXEC dbo.sp_add_jobschedule ^
                @job_name = N'%SQL_AGENT_JOB_NAME%', ^
                @name = N'DailySchedule', ^
                @enabled = 1, ^
                @freq_type = 4, ^
                @freq_interval = 1, ^
                @active_start_date = 20250618, ^
                @active_start_time = 010000; ^
            EXEC dbo.sp_add_jobserver ^
                @job_name = N'%SQL_AGENT_JOB_NAME%';" -l 60 > job_output.log 2>&1
          if %ERRORLEVEL% equ 0 (
            echo "Step 6 completed: SQL Agent job created"
            type job_output.log
          ) else (
            echo "Step 6 failed: SQL Agent job error"
            type job_output.log
            exit /b %ERRORLEVEL%
          )
